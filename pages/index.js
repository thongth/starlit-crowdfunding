import Head from "next/head";
import NextLink from "next/link";
import dynamic from "next/dynamic";

import { useEffect, useState, useContext } from "react";

import { ErrorContext } from "../context/error-context";

import { Box, Text, Heading, SimpleGrid, Button, Flex } from "@chakra-ui/react";
import { AddIcon } from "@chakra-ui/icons";
import CampaignCard from "../components/card/CampaignCard";
import FilterSearch from "../components/search/FilterSearch";
import ErrorAlert from "../components/alert/ErrorAlert";

// const Contracts = dynamic(
//   () => import('../eth/metamask/Campaign'),
//   { ssr: false }
// )

import { FactoryContract, CampaignContract } from "../eth/metamask/Campaign";
import { connectWallet, isLoggedIn } from "../eth/metamask";

export default function Home() {
  const [campaign, setCampaign] = useState([]);
  const [query, setQuery] = useState("");
  const { error, setError } = useContext(ErrorContext);

  const handleSearch = (e) => setQuery(e.target.value);
  useEffect(() => {
    connectWallet((error) => {
      setError(error);
    }).then(() => {
      console.log(FactoryContract());
      FactoryContract()
        .getDeployedCampaigns()
        .then((addresses) => {
          console.log("address", addresses);
          Promise.all(
            addresses.map((address, index) => {
              return CampaignContract(address).name();
            })
          ).then((names) => {
            setCampaign(
              names.map((name, idx) => {
                return {
                  address: addresses[idx],
                  name: name,
                };
              })
            );
          });
        })
        .catch((error) => {
          console.error(error);
          setError(error);
        });
    });
  }, []);

  const renderCampaignList = () => {
    const result = campaign.filter(
      (c) =>
        query === "" ||
        c.address.toLowerCase().indexOf(query.toLowerCase()) !== -1 ||
        c.name.toLowerCase().indexOf(query.toLowerCase()) !== -1
    );
    if (result.length > 0)
      return (
        <SimpleGrid columns={[1, null, null, 2]} spacing="4">
          {result.map((c) => (
            <CampaignCard key={c.address} address={c.address} name={c.name} />
          ))}
        </SimpleGrid>
      );
    return (
      <Text fontSize="lg" fontWeight="bold" textAlign="center" color="gray.500">
        No Result
      </Text>
    );
  };

  return (
    <>
      <Head>
        <title>Create Next App!</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <ErrorAlert />
      <Box my={8}>
        <Flex justify="space-between" alignItems="center">
          <Heading size="md">Running Campaigns</Heading>
          <NextLink href="/campaign/new">
            <Button bg="teal.400">
              Create
              <AddIcon ml={2} />
            </Button>
          </NextLink>
        </Flex>
        <FilterSearch label="Campaign" value={query} onChange={handleSearch} />
        {renderCampaignList()}
      </Box>
    </>
  );
}
