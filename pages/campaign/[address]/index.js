import Head from "next/head";
import NextLink from "next/link";
import { useRouter } from "next/router";

import { useEffect, useState } from "react";

import {
  Box,
  Container,
  Text,
  VisuallyHidden,
  Heading,
  SimpleGrid,
  Flex,
  Button,
  Spacer,
  Grid,
  GridItem,
  useBreakpoint,
} from "@chakra-ui/react";

import ContributeForm from "../../../components/forms/ContributeForm";
import { CampaignContract } from "../../../eth/metamask/Campaign";
import { divideByMillion } from "../../../eth/metamask/USDT";

const InformationBox = ({ title, subtitle, description }) => {
  return (
    <Box p="1rem" boxShadow="md" borderRadius="lg">
      <Heading as="h3" size="lg">
        {title}
      </Heading>
      <Text fontSize="xl" opacity="50%">
        {subtitle}
      </Text>
      <Text>{description}</Text>
    </Box>
  );
};

export default function CampaignPage(props) {
  const router = useRouter();
  const { address } = router.query;
  const [managerAddress, setManagerAddress] = useState("");
  const [minContrib, setMinContrib] = useState(0);
  const [campaignBalance, setCampaignBalance] = useState(0);
  const [requestNumber, setRequestNumber] = useState(0);
  const [contributorNumber, setContributorNumber] = useState(0);
  const [campaignName, setCampaignName] = useState('')
  const [campaignDesc, setCampaignDesc] = useState('')
  const [threshold, setThreshold] = useState(0)

  const breakpoint = useBreakpoint();

  console.log(breakpoint);

  useEffect(() => {
    if (!address) return;
    console.log("addresss", address);
    console.log(CampaignContract(address));
    CampaignContract(address)
      .getSummary()
      .then((result) => {
        console.log('campaign', result)
        setManagerAddress(result[4]);
        setMinContrib(divideByMillion(result[0].toNumber()));
        setCampaignBalance(divideByMillion(result[1].toNumber()));
        setRequestNumber(result[2].toNumber());
        setContributorNumber(result[3].toNumber());
        setCampaignName(result[5])
        setCampaignDesc(result[6])
        setThreshold(result[7].toNumber())
      });
  }, [address]);

  return (
    <>
      <Head>
        <title>Starlit Crowdfunding | campaign dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <VisuallyHidden>Campaign Page: {address}</VisuallyHidden>
      <Heading size="md">{`${campaignName} - ${campaignDesc}`}</Heading>
      <SimpleGrid columns={[3, null, 5]} spacing={8}>
        <GridItem colSpan={3}>
          <SimpleGrid columns={[1, null, 1, 2]} spacing="4">
            <InformationBox
              title={managerAddress}
              subtitle="Address of Manager"
              description=""
            />
            <InformationBox
              title={minContrib}
              subtitle="Minimum Contribution (USDT)"
              description=""
            />
            <InformationBox
              title={requestNumber}
              subtitle="Number of Requests"
              description=""
            />
            <InformationBox
              title={contributorNumber}
              subtitle="Number of Contributors"
              description=""
            />
            <InformationBox
              title={campaignBalance}
              subtitle="Balance (USDT)"
              description=""
            />
            <InformationBox
              title={`${threshold}%`}
              subtitle="Voting threshold"
              description=""
            />
          </SimpleGrid>
          <NextLink href={`${address}/request`}>
            <Button mt={4}>View Request</Button>
          </NextLink>
        </GridItem>
        <GridItem colSpan={["sm"].includes(breakpoint) ? 3 : 2}>
          <ContributeForm contractAddress={address} />
        </GridItem>
      </SimpleGrid>
    </>
  );
}
